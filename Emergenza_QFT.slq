
//MAIN
def main(){
 
    //CIAO SVRIVI L'INPUT QUA DIPIERRO GRAZZZZIE RAGAZZI
    input := 2 ;    
    input_2 := 2  : int[4] ;  //qubit interi [][][][]
    //INPUT COME ARRAY DI QUBIT
    ψ := input as int[4] ;

    //QFT
    //output_qft := QFT(ψ);
    
    //EVOLVE_QFT
    //res := EVOLVE_QFT(output_qft);

    res := measure(ψ  + input_2) ;

    //INVERSE QFT
    //result := reverse(QFT[8])(res) ;
	//MISURA PER TORNARE ALL'ORIGINALE
    return(   res  );

}



//QFT
def QFT[n:!ℕ](ψ: int[n])mfree: int[n]{
    for k in [0..n div 2){
        (ψ[k],ψ[n-k-1]) := (ψ[n-k-1],ψ[k]);
    }


    for k in [0..n){
        ψ[k] := H(ψ[k]);
        for l in [k+1..n){
            if ψ[l] && ψ[k]{
                phase(2*π * 2^(k-l-1));
            }
        }
    }


    return( ψ  )  ;
} 


/*********************************/
/*
  qc.h(reg[n])    
    for i in range(0, n):
        #cp(theta, control_qubit, target_qubit[, …])
        qc.cp(pie/float(2**(i+1)), reg[n-(i+1)], reg[n])
*/        

/***********************************/

/*
def EVOLVE_QFT[n:!ℕ](ψ: int[n] )mfree: int[n]{

    b := 5:int[8] ;

     for k in [0..n div 2){
        (b[k],b[n-k-1]) := (b[n-k-1],b[k]);
    }


    for k in [0..n){
        ψ[k] := H(ψ[k]);
        for l in [k+1..n){
            if ψ[l] && ψ[k]{
                phase(2*π * 2^(k-l-1));
            }
        }
    }
        
    return(  ψ )  ;
} 
*/

/***********************************/
/*
 l = len(reg_b)
    for i in range(n+1):
        if (n - i) > l - 1:
            pass
        else:
            #cp(theta, control_qubit, target_qubit[, ...])
            qc.cp(pie/float(2**(i)), reg_b[n-i], reg_a[n])
*/
/***********************************/














// Phase Estimation algorithm
/*
import qft;

def phaseEstimation[k:!ℕ](
    U:int[k] !->mfree int[k],
    u:int[k], 
    precision:!ℕ) 
    {

    ancilla := 0:int[precision];
    for i in [0..precision) { ancilla[i] := H(ancilla[i]); }

    for i in [0..precision) { 
        if ancilla[i] {
            for l in [0..2^i) {
                u := U(u);
            }
        }
    }

    ancilla := reverse(QFT[precision])(ancilla);
    result := measure(ancilla);
    measure(u);
    return result;
}
*/


